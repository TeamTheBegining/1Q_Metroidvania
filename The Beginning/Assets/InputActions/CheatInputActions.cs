//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/InputActions/CheatInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActions/CheatInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @CheatInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @CheatInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CheatInputActions"",
    ""maps"": [
        {
            ""name"": ""Cheat"",
            ""id"": ""99788715-fc6b-4718-a4b2-026da01debd9"",
            ""actions"": [
                {
                    ""name"": ""F1"",
                    ""type"": ""Button"",
                    ""id"": ""ecce7250-1592-403f-addb-ca961227b2fd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F2"",
                    ""type"": ""Button"",
                    ""id"": ""a5d53292-e300-4e1d-9fd0-9f80e0efff82"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F3"",
                    ""type"": ""Button"",
                    ""id"": ""20f20a93-040c-45b9-bbb1-37aced80d4a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F4"",
                    ""type"": ""Button"",
                    ""id"": ""1efef4e6-8638-4248-a20c-67b0e3ce74a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F5"",
                    ""type"": ""Button"",
                    ""id"": ""fdc853de-e76a-46ac-8f70-b1b4c6208496"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F6"",
                    ""type"": ""Button"",
                    ""id"": ""79d480bb-fafe-4d5b-86c9-d4ee1ef1dd18"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F7"",
                    ""type"": ""Button"",
                    ""id"": ""81039090-33af-4863-892e-76c9b73067d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F8"",
                    ""type"": ""Button"",
                    ""id"": ""3b317e49-385a-4d6e-8bc6-3c92766b1dd3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K"",
                    ""type"": ""Button"",
                    ""id"": ""db89fae2-1c86-496b-b358-15da4450b39a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M"",
                    ""type"": ""Button"",
                    ""id"": ""045a8e52-bc81-48aa-b879-b017dd174069"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae9cb3d0-39fa-4972-a907-5a89d98a2183"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a98f717b-833a-4c3c-aa30-d1411790ef45"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcf2202d-c006-43ff-975c-cfc3a0c6145b"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d084e2d-02a9-4ff4-8e03-52296a8c9d7b"",
                    ""path"": ""<Keyboard>/f4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bc82fab-c1cb-4c05-9f75-5b5e49f6c2a1"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e8fbbd0-dc8b-48c7-ab69-27a3b523a9d3"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa673fcf-7fc5-47b3-97e0-c08e25a90d00"",
                    ""path"": ""<Keyboard>/f7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7831a2a2-b45c-4594-8921-4440d9fc7ed3"",
                    ""path"": ""<Keyboard>/f8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3fddef5-0116-4ba9-b4e9-3fbc10efe62c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d609bbf0-41d2-42bc-8c13-6c4e7cb52749"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cheat
        m_Cheat = asset.FindActionMap("Cheat", throwIfNotFound: true);
        m_Cheat_F1 = m_Cheat.FindAction("F1", throwIfNotFound: true);
        m_Cheat_F2 = m_Cheat.FindAction("F2", throwIfNotFound: true);
        m_Cheat_F3 = m_Cheat.FindAction("F3", throwIfNotFound: true);
        m_Cheat_F4 = m_Cheat.FindAction("F4", throwIfNotFound: true);
        m_Cheat_F5 = m_Cheat.FindAction("F5", throwIfNotFound: true);
        m_Cheat_F6 = m_Cheat.FindAction("F6", throwIfNotFound: true);
        m_Cheat_F7 = m_Cheat.FindAction("F7", throwIfNotFound: true);
        m_Cheat_F8 = m_Cheat.FindAction("F8", throwIfNotFound: true);
        m_Cheat_K = m_Cheat.FindAction("K", throwIfNotFound: true);
        m_Cheat_M = m_Cheat.FindAction("M", throwIfNotFound: true);
    }

    ~@CheatInputActions()
    {
        UnityEngine.Debug.Assert(!m_Cheat.enabled, "This will cause a leak and performance issues, CheatInputActions.Cheat.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cheat
    private readonly InputActionMap m_Cheat;
    private List<ICheatActions> m_CheatActionsCallbackInterfaces = new List<ICheatActions>();
    private readonly InputAction m_Cheat_F1;
    private readonly InputAction m_Cheat_F2;
    private readonly InputAction m_Cheat_F3;
    private readonly InputAction m_Cheat_F4;
    private readonly InputAction m_Cheat_F5;
    private readonly InputAction m_Cheat_F6;
    private readonly InputAction m_Cheat_F7;
    private readonly InputAction m_Cheat_F8;
    private readonly InputAction m_Cheat_K;
    private readonly InputAction m_Cheat_M;
    /// <summary>
    /// Provides access to input actions defined in input action map "Cheat".
    /// </summary>
    public struct CheatActions
    {
        private @CheatInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CheatActions(@CheatInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F1".
        /// </summary>
        public InputAction @F1 => m_Wrapper.m_Cheat_F1;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F2".
        /// </summary>
        public InputAction @F2 => m_Wrapper.m_Cheat_F2;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F3".
        /// </summary>
        public InputAction @F3 => m_Wrapper.m_Cheat_F3;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F4".
        /// </summary>
        public InputAction @F4 => m_Wrapper.m_Cheat_F4;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F5".
        /// </summary>
        public InputAction @F5 => m_Wrapper.m_Cheat_F5;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F6".
        /// </summary>
        public InputAction @F6 => m_Wrapper.m_Cheat_F6;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F7".
        /// </summary>
        public InputAction @F7 => m_Wrapper.m_Cheat_F7;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/F8".
        /// </summary>
        public InputAction @F8 => m_Wrapper.m_Cheat_F8;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/K".
        /// </summary>
        public InputAction @K => m_Wrapper.m_Cheat_K;
        /// <summary>
        /// Provides access to the underlying input action "Cheat/M".
        /// </summary>
        public InputAction @M => m_Wrapper.m_Cheat_M;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Cheat; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CheatActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CheatActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CheatActions" />
        public void AddCallbacks(ICheatActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatActionsCallbackInterfaces.Add(instance);
            @F1.started += instance.OnF1;
            @F1.performed += instance.OnF1;
            @F1.canceled += instance.OnF1;
            @F2.started += instance.OnF2;
            @F2.performed += instance.OnF2;
            @F2.canceled += instance.OnF2;
            @F3.started += instance.OnF3;
            @F3.performed += instance.OnF3;
            @F3.canceled += instance.OnF3;
            @F4.started += instance.OnF4;
            @F4.performed += instance.OnF4;
            @F4.canceled += instance.OnF4;
            @F5.started += instance.OnF5;
            @F5.performed += instance.OnF5;
            @F5.canceled += instance.OnF5;
            @F6.started += instance.OnF6;
            @F6.performed += instance.OnF6;
            @F6.canceled += instance.OnF6;
            @F7.started += instance.OnF7;
            @F7.performed += instance.OnF7;
            @F7.canceled += instance.OnF7;
            @F8.started += instance.OnF8;
            @F8.performed += instance.OnF8;
            @F8.canceled += instance.OnF8;
            @K.started += instance.OnK;
            @K.performed += instance.OnK;
            @K.canceled += instance.OnK;
            @M.started += instance.OnM;
            @M.performed += instance.OnM;
            @M.canceled += instance.OnM;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CheatActions" />
        private void UnregisterCallbacks(ICheatActions instance)
        {
            @F1.started -= instance.OnF1;
            @F1.performed -= instance.OnF1;
            @F1.canceled -= instance.OnF1;
            @F2.started -= instance.OnF2;
            @F2.performed -= instance.OnF2;
            @F2.canceled -= instance.OnF2;
            @F3.started -= instance.OnF3;
            @F3.performed -= instance.OnF3;
            @F3.canceled -= instance.OnF3;
            @F4.started -= instance.OnF4;
            @F4.performed -= instance.OnF4;
            @F4.canceled -= instance.OnF4;
            @F5.started -= instance.OnF5;
            @F5.performed -= instance.OnF5;
            @F5.canceled -= instance.OnF5;
            @F6.started -= instance.OnF6;
            @F6.performed -= instance.OnF6;
            @F6.canceled -= instance.OnF6;
            @F7.started -= instance.OnF7;
            @F7.performed -= instance.OnF7;
            @F7.canceled -= instance.OnF7;
            @F8.started -= instance.OnF8;
            @F8.performed -= instance.OnF8;
            @F8.canceled -= instance.OnF8;
            @K.started -= instance.OnK;
            @K.performed -= instance.OnK;
            @K.canceled -= instance.OnK;
            @M.started -= instance.OnM;
            @M.performed -= instance.OnM;
            @M.canceled -= instance.OnM;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CheatActions.UnregisterCallbacks(ICheatActions)" />.
        /// </summary>
        /// <seealso cref="CheatActions.UnregisterCallbacks(ICheatActions)" />
        public void RemoveCallbacks(ICheatActions instance)
        {
            if (m_Wrapper.m_CheatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CheatActions.AddCallbacks(ICheatActions)" />
        /// <seealso cref="CheatActions.RemoveCallbacks(ICheatActions)" />
        /// <seealso cref="CheatActions.UnregisterCallbacks(ICheatActions)" />
        public void SetCallbacks(ICheatActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CheatActions" /> instance referencing this action map.
    /// </summary>
    public CheatActions @Cheat => new CheatActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Cheat" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CheatActions.AddCallbacks(ICheatActions)" />
    /// <seealso cref="CheatActions.RemoveCallbacks(ICheatActions)" />
    public interface ICheatActions
    {
        /// <summary>
        /// Method invoked when associated input action "F1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF5(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF6(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F7" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF7(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "F8" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnF8(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "K" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnK(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "M" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM(InputAction.CallbackContext context);
    }
}
